// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  walletAddress     String      @unique
  email             String?     @unique
  username          String?     @unique
  credits           Float       @default(3.0)
  tier              String      @default("free") // free, starter, viral
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLoginAt       DateTime?
  
  tokens            Token[]
  generations       Generation[]
  transactions      CreditTransaction[]
  subscription      Subscription?
  referralCode      String      @unique @default(cuid())
  referredBy        String?
  referrals         User[]      @relation("UserReferrals")
  referrer          User?       @relation("UserReferrals", fields: [referredBy], references: [id])
  achievements      Achievement[]
  
  @@index([walletAddress])
  @@index([email])
  @@index([tier])
}

model Token {
  id                String      @id @default(cuid())
  address           String      @unique
  chain             String      // solana, base, arbitrum, etc
  name              String
  symbol            String
  description       String?
  
  creatorId         String
  creator           User        @relation(fields: [creatorId], references: [id])
  
  logoUrl           String?
  logoIpfsHash      String?
  
  totalSupply       String  // BigInt as string for SQLite
  decimals          Int
  
  marketCap         Float?      @default(0)
  liquidity         Float?      @default(0)
  holders           Int         @default(0)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  launchedAt        DateTime?
  
  generations       Generation[]
  milestones        TokenMilestone[]
  analytics         TokenAnalytics[]
  
  @@index([creatorId])
  @@index([chain])
  @@index([marketCap])
}

model Generation {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  tokenId           String?
  token             Token?      @relation(fields: [tokenId], references: [id])
  
  type              String      // logo, meme, gif
  prompt            String
  optimizedPrompt   String
  
  provider          String      // together, replicate
  model             String
  
  resultUrl         String
  ipfsHash          String?
  
  creditCost        Float
  processingTime    Int         // milliseconds
  
  metadata          String? // JSON as string for SQLite
  
  createdAt         DateTime    @default(now())
  
  @@index([userId])
  @@index([tokenId])
  @@index([type])
}

model CreditTransaction {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  amount            Float       // negative for spending, positive for earning
  type              String      // earn, spend, refund
  reason            String
  
  metadata          String? // JSON as string for SQLite
  
  balanceBefore     Float
  balanceAfter      Float
  
  timestamp         DateTime    @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([timestamp])
}

model Subscription {
  id                String      @id @default(cuid())
  userId            String      @unique
  user              User        @relation(fields: [userId], references: [id])
  
  tier              String      // starter, viral
  status            String      // active, cancelled, expired
  
  priceUSD          Float
  priceCrypto       Float?
  paymentMethod     String      // card, crypto
  paymentTxHash     String?
  
  startedAt         DateTime    @default(now())
  expiresAt         DateTime
  cancelledAt       DateTime?
  
  autoRenew         Boolean     @default(true)
  
  @@index([status])
  @@index([expiresAt])
}

model TokenMilestone {
  id                String      @id @default(cuid())
  tokenId           String
  token             Token       @relation(fields: [tokenId], references: [id])
  
  milestone         String      // 10k_mcap, 100k_mcap, 1m_mcap
  achievedAt        DateTime    @default(now())
  
  rewardCredits     Float
  rewardClaimed     Boolean     @default(false)
  
  @@unique([tokenId, milestone])
  @@index([tokenId])
}

model Achievement {
  id                String      @id @default(cuid())
  userId            String
  user              User        @relation(fields: [userId], references: [id])
  
  name              String      // credit_novice, meme_master, etc
  category          String      // credits, generation, community
  
  unlockedAt        DateTime    @default(now())
  rewardCredits     Float       @default(0)
  
  metadata          String? // JSON as string for SQLite
  
  @@unique([userId, name])
  @@index([userId])
  @@index([category])
}

model TokenAnalytics {
  id                String      @id @default(cuid())
  tokenId           String
  token             Token       @relation(fields: [tokenId], references: [id])
  
  timestamp         DateTime    @default(now())
  
  price             Float
  volume24h         Float
  marketCap         Float
  liquidity         Float
  holders           Int
  
  socialScore       Float?      // calculated virality score
  twitterMentions   Int?
  telegramMembers   Int?
  
  @@index([tokenId])
  @@index([timestamp])
}