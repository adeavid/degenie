// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String   @id @default(cuid())
  walletAddress String  @unique
  email        String?  @unique
  credits      Float    @default(10.0)
  tier         String   @default("free")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  tokens       Token[]
  trades       Trade[]
  comments     Comment[]
  watchlist    Watchlist[]
}

// Token model - represents created tokens
model Token {
  address          String   @id // Token mint address
  name             String
  symbol           String
  description      String?
  logoUrl          String?
  website          String?
  twitter          String?
  telegram         String?
  
  creator          User     @relation(fields: [creatorId], references: [id])
  creatorId        String
  
  totalSupply      BigInt
  decimals         Int      @default(6)
  
  // Bonding curve data
  bondingCurveAddress String?
  currentPrice     Float    @default(0.000069)
  treasuryBalance  Float    @default(0)
  totalVolume      Float    @default(0)
  bondingProgress  Float    @default(0)
  isGraduated      Boolean  @default(false)
  graduatedAt      DateTime?
  
  // Stats
  marketCap        Float    @default(0)
  volume24h        Float    @default(0)
  priceChange24h   Float    @default(0)
  holdersCount     Int      @default(0)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  trades           Trade[]
  candles1m        Candle1m[]
  candles5m        Candle5m[]
  candles15m       Candle15m[]
  candles1h        Candle1h[]
  candles4h        Candle4h[]
  candles1d        Candle1d[]
  comments         Comment[]
  watchlist        Watchlist[]
  holders          Holder[]
}

// Trade model - on-chain trades
model Trade {
  id               String   @id @default(cuid())
  signature        String   @unique // Solana transaction signature
  
  token            Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress     String
  
  trader           User     @relation(fields: [traderId], references: [id])
  traderId         String
  
  type             TradeType
  solAmount        Float
  tokenAmount      Float
  price            Float
  
  // Fees
  platformFee      Float
  creatorFee       Float
  
  // State after trade
  newPrice         Float
  newSupply        Float
  bondingProgress  Float
  
  blockTime        DateTime
  createdAt        DateTime @default(now())
  
  @@index([tokenAddress, blockTime])
  @@index([traderId])
}

enum TradeType {
  BUY
  SELL
}

// Candle models for different timeframes
model Candle1m {
  id          String   @id @default(cuid())
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  time        DateTime @db.Timestamp(0)
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  trades      Int
  
  @@unique([tokenAddress, time])
  @@index([tokenAddress, time])
}

model Candle5m {
  id          String   @id @default(cuid())
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  time        DateTime @db.Timestamp(0)
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  trades      Int
  
  @@unique([tokenAddress, time])
  @@index([tokenAddress, time])
}

model Candle15m {
  id          String   @id @default(cuid())
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  time        DateTime @db.Timestamp(0)
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  trades      Int
  
  @@unique([tokenAddress, time])
  @@index([tokenAddress, time])
}

model Candle1h {
  id          String   @id @default(cuid())
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  time        DateTime @db.Timestamp(0)
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  trades      Int
  
  @@unique([tokenAddress, time])
  @@index([tokenAddress, time])
}

model Candle4h {
  id          String   @id @default(cuid())
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  time        DateTime @db.Timestamp(0)
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  trades      Int
  
  @@unique([tokenAddress, time])
  @@index([tokenAddress, time])
}

model Candle1d {
  id          String   @id @default(cuid())
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  time        DateTime @db.Timestamp(0)
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  trades      Int
  
  @@unique([tokenAddress, time])
  @@index([tokenAddress, time])
}

// Comment model
model Comment {
  id          String   @id @default(cuid())
  content     String
  
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[] @relation("CommentReplies")
  
  likes       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([tokenAddress])
  @@index([authorId])
}

// Watchlist model
model Watchlist {
  id          String   @id @default(cuid())
  
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  createdAt   DateTime @default(now())
  
  @@unique([userId, tokenAddress])
}

// Holder model - token holders
model Holder {
  id          String   @id @default(cuid())
  
  token       Token    @relation(fields: [tokenAddress], references: [address])
  tokenAddress String
  
  walletAddress String
  balance      BigInt
  percentage   Float
  
  firstBuyAt   DateTime
  lastUpdateAt DateTime @default(now())
  
  @@unique([tokenAddress, walletAddress])
  @@index([tokenAddress, balance])
}

// Credit transaction model
model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  type        CreditTransactionType
  description String
  createdAt   DateTime @default(now())
}

enum CreditTransactionType {
  PURCHASE
  EARNED
  SPENT
  REFUND
}